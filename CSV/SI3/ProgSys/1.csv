Quel est le rôle principal du système d'exploitation lors de l'exécution d'un programme ?,Gérer les périphériques d'entrée/sortie,Fournir une interface graphique,Allouer et gérer les ressources matérielles,Compiler le code source,Allouer et gérer les ressources matérielles,none
Sous Linux, quelle extension de fichier est généralement utilisée pour les bibliothèques dynamiques ?,.a,.so,.lib,.dll,.so,none
Sous Windows, quelle extension de fichier est généralement utilisée pour les bibliothèques dynamiques ?,.a,.so,.lib,.dll,.dll,none
Qu'est ce qu'affiche ce programme ?,Le programme affiche "Parent process",Le programme affiche "Child process",Le programme affiche "Parent process" puis "Child process",Le programme affiche "Child process" puis "Parent process",On ne sait pas,On ne sait pas,https://i.postimg.cc/D0yMTP5y/parent-child-affichage.png
Comment se fait l'affichage dans ce programme ?,Il s'affiche d'abord "Hello from thread" puis "Hello from main",Il s'affiche d'abord "Hello from main" puis "Hello from thread",Les deux affichages peuvent se produire dans n'importe quel ordre,Le programme ne compile pas,Les deux affichages peuvent se produire dans n'importe quel ordre,https://i.postimg.cc/Wb9PhhJH/hello-main-thread.png
Que se passe-t-il dans ce programme ?,Le fichier `data.txt` est créé ou écrasé avec le contenu "Sample data",Le contenu "Sample data" est ajouté à la fin de `data.txt`,Le programme lit le contenu de `data.txt`,Une erreur se produit si le fichier n'existe pas,Le fichier `data.txt` est créé ou écrasé avec le contenu "Sample data",https://i.postimg.cc/KjzMF1Ty/data-txt.png
Combien d'affichages sont faits dans ce programme ?,Le programme affiche "Avant fork" deux fois, suivi de "Après fork" deux fois,Le programme affiche "Avant fork" une fois, suivi de "Après fork" deux fois,Le programme affiche "Avant fork" deux fois, suivi de "Après fork" une fois,Le comportement est imprévisible,Le programme affiche "Avant fork" une fois, suivi de "Après fork" deux fois,https://i.postimg.cc/6Qyg7cN7/avant-apres-fork.png
Que se passe-t-il ici ?,Le processus fils exécute la commande `date`, et le père continue son exécution,Le processus père exécute la commande `date`, et le fils continue son exécution,Les deux processus exécutent la commande `date`,Le programme se termine sans rien afficher,Le processus fils exécute la commande `date`, et le père continue son exécution,https://i.postimg.cc/VvCzj1QC/date-fils.png
Que se passe-t-il ici ?,Le programme crée un thread qui incrémente une variable globale,Le programme crée une variable locale au thread,Le programme ne crée pas de nouveau thread,Le programme provoque une erreur de segmentation,Le programme crée un thread qui incrémente une variable globale,https://i.postimg.cc/HsTprqvV/glob-var-thread.png
Complétez la ligne manquante dans le code : int valeur = 10; pthread_create(&thread, NULL, ma_fonction, _____),valeur,&valeur,&(void)valeur,(void *)&valeur,(void *)valeur,(void *)&valeur,none
Que se passe-t-il ici ?,Le programme affiche "10" dans le processus père et "20" dans le processus fils,Le programme affiche "10" dans les deux processus,Le programme affiche "20" dans les deux processus,Le comportement est imprévisible,Le programme affiche "10" dans le processus père et "20" dans le processus fils,https://i.postimg.cc/j597xs4w/var-10-20.png
Que se passe-t-il ici ?,Le programme principal attend la fin du thread,Les deux actions se déroulent en parallèle,Le programme se termine immédiatement,Les deux actions se déroulent en parallèle,https://i.postimg.cc/43QPxhYK/thread-wait.png
Que se passe-t-il ici ?,Le programme affiche "Variable partagée : 1" puis "Variable partagée : 2",Le programme affiche "Variable partagée : 2" puis "Variable partagée : 1",Le programme affiche "Variable partagée : 1" deux fois,Le programme affiche "Variable partagée : 2" deux fois,Le comportement est imprévisible,Le comportement est imprévisible,https://i.postimg.cc/vTFrsryx/var-partagee.png
Quel appel système POSIX ouvre un fichier en lecture seule ?,open(path, O_RDONLY),fopen(path, "r"),read(path, O_RDONLY),create(path, O_RDONLY),open(path, O_RDONLY),none
Quel est le descripteur de fichier standard pour la sortie standard ?,0,1,2,3,1,none
Quelle fonction POSIX permet d'écrire dans un fichier via son descripteur ?,fwrite,write,fprintf,fputs,write,none
Quel appel système est utilisé pour rediriger la sortie standard vers un fichier ?,dup2(fd, STDOUT_FILENO),freopen(file, "w", stdout),redirect(stdout, file),write(fd, STDOUT_FILENO),dup2(fd, STDOUT_FILENO),none
Que retourne l’appel à `open()` en cas d’échec ?,-1,0,NULL,errno,-1,none
Quel appel permet de fermer un descripteur de fichier ouvert par open ?,close(fd),fclose(fd),terminate(fd),unlink(fd),close(fd),none
Quelle est la différence entre read et fread ?,read utilise des descripteurs, fread utilise des FILE*,read est ANSI, fread est POSIX,read est pour les chaînes de caractères uniquement,fread ne peut pas être utilisé avec des fichiers binaires,read utilise des descripteurs, fread utilise des FILE*,none
Quel descripteur représente l’entrée standard (stdin) ?,0,1,2,3,0,none
Quel est l'effet de dup2(fd, STDERR_FILENO) ?,Redirige stderr vers le fichier désigné par fd,Duplique la sortie standard,Efface le contenu du fichier fd,Redirige stdin vers le fichier fd,Redirige stderr vers le fichier désigné par fd,none
Quel appel système permet de créer un fichier s’il n’existe pas ?,open(path, O_CREAT | O_WRONLY, 0644),fopen(path, "r"),mkdir(path),read(path, O_CREAT),open(path, O_CREAT | O_WRONLY, 0644),none
Que fait lseek(fd, offset, SEEK_SET) ?,Déplace le curseur de lecture/écriture dans un fichier,Écrit à la position spécifiée dans le fichier,Déplace le fichier à l'offset donné,Change le mode d'ouverture du fichier,Déplace le curseur de lecture/écriture dans un fichier,none
Quel est l’effet de l’appel write(fd, buffer, nbytes) ?,Écrit nbytes d’un buffer dans le fichier associé à fd,Lit nbytes d’un fichier vers le buffer,Ferme le fichier fd,Déplace le curseur de lecture dans le fichier,Écrit nbytes d’un buffer dans le fichier associé à fd,none